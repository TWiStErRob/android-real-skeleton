<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="AmbiguousFieldAccess" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AmbiguousMethodCall" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintAppLinksAutoVerifyError" enabled="true" level="ERROR" enabled_by_default="true" />
    <inspection_tool class="AndroidLintAppLinksAutoVerifyWarning" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintBackButton" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintEasterEgg" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintGoogleAppIndexingApiWarning" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintIconExpectedSize" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintLogConditional" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintMangledCRLF" enabled="true" level="ERROR" enabled_by_default="true" />
    <inspection_tool class="AndroidLintMissingSuperCall" enabled="false" level="ERROR" enabled_by_default="false" />
    <inspection_tool class="AndroidLintNegativeMargin" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintNewerVersionAvailable" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintSelectableText" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintStopShip" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintTypographyQuotes" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AndroidLintUnusedIds" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="AssertEqualsCalledOnArray" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="BeforeClassOrAfterClassIsPublicStaticVoidNoArg" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="BeforeOrAfterIsPublicVoidNoArg" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="EmptyMethod" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="EXCLUDE_ANNOS">
        <value>
          <list size="0" />
        </value>
      </option>
      <option name="commentsAreContent" value="true" />
    </inspection_tool>
    <inspection_tool class="EmptyStatementBody" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="m_reportEmptyBlocks" value="true" />
      <option name="commentsAreContent" value="true" />
    </inspection_tool>
    <inspection_tool class="InnerClassVariableHidesOuterClassVariable" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="m_ignoreInvisibleFields" value="true" />
    </inspection_tool>
    <inspection_tool class="JUnit3StyleTestMethodInJUnit4Class" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="JUnit4MethodNamingConvention" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="m_regex" value="test[A-Za-z_\d]*" />
    </inspection_tool>
    <inspection_tool class="JUnit5AssertionsConverter" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="JUnit5Converter" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="JUnitDatapoint" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="JUnitRule" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="JavaDoc" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="TOP_LEVEL_CLASS_OPTIONS">
        <value>
          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
          <option name="REQUIRED_TAGS" value="" />
        </value>
      </option>
      <option name="INNER_CLASS_OPTIONS">
        <value>
          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
          <option name="REQUIRED_TAGS" value="" />
        </value>
      </option>
      <option name="METHOD_OPTIONS">
        <value>
          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
          <option name="REQUIRED_TAGS" value="@return@param@throws or @exception" />
        </value>
      </option>
      <option name="FIELD_OPTIONS">
        <value>
          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
          <option name="REQUIRED_TAGS" value="" />
        </value>
      </option>
      <option name="IGNORE_DEPRECATED" value="false" />
      <option name="IGNORE_JAVADOC_PERIOD" value="true" />
      <option name="IGNORE_DUPLICATED_THROWS" value="false" />
      <option name="IGNORE_POINT_TO_ITSELF" value="false" />
      <option name="myAdditionalJavadocTags" value="author" />
    </inspection_tool>
    <inspection_tool class="LambdaParameterHidingMemberVariable" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="LocalVariableHidingMemberVariable" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="m_ignoreInvisibleFields" value="true" />
      <option name="m_ignoreStaticMethods" value="true" />
    </inspection_tool>
    <inspection_tool class="LoggerInitializedWithForeignClass" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="loggerFactoryMethodName" value="getLogger,getLogger,getLog,getLogger" />
    </inspection_tool>
    <inspection_tool class="MalformedSetUpTearDown" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="MethodCanBeVariableArityMethod" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="ignoreMultipleArrayParameters" value="true" />
      <option name="ignoreMultiDimensionalArrayParameters" value="true" />
    </inspection_tool>
    <inspection_tool class="MisorderedAssertEqualsParameters" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="NullableProblems" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="REPORT_NULLABLE_METHOD_OVERRIDES_NOTNULL" value="true" />
      <option name="REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL" value="true" />
      <option name="REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE" value="true" />
      <option name="REPORT_NOT_ANNOTATED_PARAMETER_OVERRIDES_NOTNULL" value="true" />
      <option name="REPORT_NOT_ANNOTATED_GETTER" value="true" />
      <option name="REPORT_NOTNULL_PARAMETERS_OVERRIDES_NOT_ANNOTATED" value="true" />
      <option name="REPORT_NOT_ANNOTATED_SETTER_PARAMETER" value="true" />
      <option name="REPORT_ANNOTATION_NOT_PROPAGATED_TO_OVERRIDERS" value="true" />
      <option name="REPORT_NULLS_PASSED_TO_NON_ANNOTATED_METHOD" value="true" />
    </inspection_tool>
    <inspection_tool class="ParameterHidingMemberVariable" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="m_ignoreInvisibleFields" value="true" />
      <option name="m_ignoreStaticMethodParametersHidingInstanceFields" value="true" />
      <option name="m_ignoreForConstructors" value="true" />
      <option name="m_ignoreForPropertySetters" value="true" />
      <option name="m_ignoreForAbstractMethods" value="false" />
    </inspection_tool>
    <inspection_tool class="ParameterizedParametersStaticCollection" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="RawUseOfParameterizedType" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="ignoreObjectConstruction" value="false" />
    </inspection_tool>
    <inspection_tool class="RedundantSuppression" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection" enabled="true" level="WARNING" enabled_by_default="true">
      <replaceConfiguration name="Hamcrest: simplify Matchers.both.and to Matchers.allOf" text="org.hamcrest.Matchers.both($x$).and($y$)" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.hamcrest.Matchers.allOf($x$, $y$)">
        <constraint name="x" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="y" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Hamcrest: Matchers.allOf called with single argument" text="org.hamcrest.Matchers.allOf($singleMatcher$)" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="$singleMatcher$">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="singleMatcher" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Hamcrest: Matchers.anyOf called with single argument" text="org.hamcrest.Matchers.anyOf($singleMatcher$)" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="$singleMatcher$">
        <constraint name="__context__" within="" contains="" />
        <constraint name="singleMatcher" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Hamcrest: use empty() matcher instead of assertEquals(0, *)" text="assertEquals(0, $collection$.size());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="assertThat($collection$, org.hamcrest.Matchers.empty());">
        <constraint name="collection" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Hamcrest: use hasSize() matcher instead of assertEquals(*, size())" text="assertEquals($expectedSize$, $collection$.size());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="assertThat($collection$, org.hamcrest.Matchers.hasSize($expectedSize$));">
        <constraint name="expectedSize" regexp="0" negateName="true" within="" contains="" />
        <constraint name="collection" nameOfExprType="java.util.Collection" expressionTypes="java.util.Collection" exprTypeWithinHierarchy="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Espresso fix: missing ViewAssertions.matches wrapper in ViewInteraction.check call" text="$expr$.check($matcher$)" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="false" shortenFQN="true" useStaticImport="true" replacement="$expr$.check(android.support.test.espresso.assertion.ViewAssertions.matches($matcher$))">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="matcher" nameOfExprType="org\.hamcrest\.Matcher" expressionTypes="org.hamcrest.Matcher" nameOfFormalType="android\.support\.test\.espresso\.ViewAssertion" exceptedTypes="android.support.test.espresso.ViewAssertion" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (1)" text="$expr$.$method$(eq($arg1$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (2)" text="$expr$.$method$(org.mockito.ArgumentMatchers.eq($arg1$), org.mockito.ArgumentMatchers.eq($arg2$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$, $arg2$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
        <constraint name="arg2" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (3)" text="$expr$.$method$(org.mockito.ArgumentMatchers.eq($arg1$), org.mockito.ArgumentMatchers.eq($arg2$), org.mockito.ArgumentMatchers.eq($arg3$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$, $arg2$, $arg3$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
        <constraint name="arg2" within="" contains="" />
        <constraint name="arg3" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (4)" text="$expr$.$method$(org.mockito.ArgumentMatchers.eq($arg1$), org.mockito.ArgumentMatchers.eq($arg2$), org.mockito.ArgumentMatchers.eq($arg3$), org.mockito.ArgumentMatchers.eq($arg4$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$, $arg2$, $arg3$, $arg4$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
        <constraint name="arg2" within="" contains="" />
        <constraint name="arg3" within="" contains="" />
        <constraint name="arg4" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (5)" text="$expr$.$method$(org.mockito.ArgumentMatchers.eq($arg1$), org.mockito.ArgumentMatchers.eq($arg2$), org.mockito.ArgumentMatchers.eq($arg3$), org.mockito.ArgumentMatchers.eq($arg4$), org.mockito.ArgumentMatchers.eq($arg5$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$, $arg2$, $arg3$, $arg4$, $arg5$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
        <constraint name="arg2" within="" contains="" />
        <constraint name="arg3" within="" contains="" />
        <constraint name="arg4" within="" contains="" />
        <constraint name="arg5" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito: unnecessary argument matchers (6)" text="$expr$.$method$(org.mockito.ArgumentMatchers.eq($arg1$), org.mockito.ArgumentMatchers.eq($arg2$), org.mockito.ArgumentMatchers.eq($arg3$), org.mockito.ArgumentMatchers.eq($arg4$), org.mockito.ArgumentMatchers.eq($arg5$), org.mockito.ArgumentMatchers.eq($arg6$)) " recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$expr$.$method$($arg1$, $arg2$, $arg3$, $arg4$, $arg5$, $arg6$)">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="expr" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="arg1" within="" contains="" />
        <constraint name="arg2" within="" contains="" />
        <constraint name="arg3" within="" contains="" />
        <constraint name="arg4" within="" contains="" />
        <constraint name="arg5" within="" contains="" />
        <constraint name="arg6" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito refactor: convert when.thenReturn to doReturn.when" text="org.mockito.Mockito.when($obj$.$method$($args$)).thenReturn($ret$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.mockito.Mockito.doReturn($ret$).when($obj$).$method$($args$);">
        <constraint name="ret" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="obj" within="" contains="" />
        <constraint name="args" minCount="0" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito refactor: convert doReturn.when to when.thenReturn" text="org.mockito.Mockito.doReturn($ret$).when($obj$).$method$($args$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.mockito.Mockito.when($obj$.$method$($args$)).thenReturn($ret$);">
        <constraint name="ret" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="obj" within="" contains="" />
        <constraint name="args" minCount="0" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito refactor: convert when.thenAnswer style stubbing to verification" text="org.mockito.Mockito.when($obj$.$method$($args$)).$answer$($answerArgs$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.mockito.Mockito.verify($obj$).$method$($args$);">
        <constraint name="ret" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="obj" within="" contains="" />
        <constraint name="args" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="answer" within="" contains="" />
        <constraint name="any" within="" contains="" />
        <constraint name="answerArgs" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
        <constraint name="whe" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito refactor: convert doAnswer.when style stubbing to verification" text="org.mockito.Mockito.$answer$($ret$).when($obj$).$method$($args$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.mockito.Mockito.verify($obj$).$method$($args$);">
        <constraint name="ret" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="obj" within="" contains="" />
        <constraint name="args" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="answer" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Mockito refactor: convert verify to when.thenAnswer style" text="org.mockito.Mockito.verify($obj$).$method$($args$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.mockito.Mockito.when($obj$.$method$($args$)).thenReturn();">
        <constraint name="ret" within="" contains="" />
        <constraint name="method" within="" contains="" />
        <constraint name="obj" within="" contains="" />
        <constraint name="args" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(new Subscriber.onNext) to Observable.just" text="rx.Observable.create(new rx.Observable.OnSubscribe() {&#10;&#9;@Override&#10;&#9;public void call(rx.Subscriber $subscriber$) {&#10;&#9;&#9;$subscriber$.onNext($value$);&#10;&#9;&#9;$subscriber$.onCompleted();&#10;&#9;}&#10;})" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.just($value$)">
        <constraint name="value" within="" contains="" />
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(() -&gt; Subscriber.onNext) to Observable.just" text="rx.Observable.create($subscriber$ -&gt; {&#10;&#9;$subscriber$.onNext($value$);&#10;&#9;$subscriber$.onCompleted();&#10;})" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.just($value$)">
        <constraint name="value" within="" contains="" />
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(new Subscriber.onError) to Observable.error" text="rx.Observable.create(new rx.Observable.OnSubscribe&lt;$type$&gt;() {&#10;&#9;@Override&#10;&#9;public void call(rx.Subscriber $subscriber$) {&#10;&#9;&#9;$subscriber$.onError($error$);&#10;&#9;}&#10;})" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.&lt;$type$&gt;error($error$)">
        <constraint name="error" within="" contains="" />
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="type" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(() -&gt; Subscriber.onError) to Observable.error" text="rx.Observable.create($subscriber$ -&gt; $subscriber$.onError($error$))" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.&lt;$type$&gt;error($error$)">
        <constraint name="error" within="" contains="" />
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="type" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(new Subscriber.onCompleted) to Observable.empty" text="rx.Observable.create(new rx.Observable.OnSubscribe() {&#10;&#9;@Override&#10;&#9;public void call(rx.Subscriber $subscriber$) {&#10;&#9;&#9;$subscriber$.onCompleted();&#10;&#9;}&#10;})" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.empty()">
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(() -&gt; Subscriber.onCompleted) to Observable.empty" text="rx.Observable.create($subscriber$ -&gt; $subscriber$.onCompleted())" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.empty()">
        <constraint name="subscriber" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: simplify create(Observer::onCompleted) to Observable.empty" text="rx.Observable.create(rx.Observer::onCompleted)" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.Observable.empty()">
        <constraint name="__context__" target="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use TestSubscriber instead of TestObserver (has better API for assertions)" text="rx.observers.TestObserver&lt;$T$&gt; $var$ = $init$;" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="rx.observers.TestSubscriber&lt;$T$&gt; $var$ = $init$;">
        <constraint name="T" within="" contains="" />
        <constraint name="var" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="init" minCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertValue() instead of get(0)" text="assertEquals(1, $subscriber$.getOnNextEvents().size());&#10;$other_stuff$;&#10;assertEquals($value$, $subscriber$.getOnNextEvents().get(0));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$other_stuff$;&#10;$subscriber$.assertValue($value$);">
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="value" within="" contains="" />
        <constraint name="other_stuff" minCount="0" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoValues() instead (size)" text="assertEquals(0, $subscriber$.getOnNextEvents().size());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoValues();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoValues() instead (empty)" text="assertThat($subscriber$.getOnNextEvents(), org.hamcrest.Matchers.empty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoValues();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoValues() instead (is(empty))" text="assertThat($subscriber$.getOnNextEvents(), org.hamcrest.Matchers.is(org.hamcrest.Matchers.empty()));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoValues();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoValues() instead (isEmpty)" text="assertTrue($subscriber$.getOnNextEvents().isEmpty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoValues();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertError() instead of get(0)" text="assertEquals(1, $subscriber$.getOnErrorEvents().size());&#10;$other_stuff$;&#10;assertEquals($value$, $subscriber$.getOnErrorEvents().get(0));&#10;" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$other_stuff$;&#10;$subscriber$.assertError($value$);&#10;&#10;">
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="value" within="" contains="" />
        <constraint name="other_stuff" minCount="0" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoErrors() instead (size)" text="assertEquals(0, $subscriber$.getOnErrorEvents().size());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoErrors();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoErrors() instead (empty)" text="assertThat($subscriber$.getOnErrorEvents(), org.hamcrest.Matchers.empty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoErrors();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoErrors() instead (is(empty))" text="assertThat($subscriber$.getOnErrorEvents(), org.hamcrest.Matchers.is(org.hamcrest.Matchers.empty()));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoErrors();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNoErrors() instead (isEmpty)" text="assertTrue($subscriber$.getOnErrorEvents().isEmpty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNoErrors();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNotCompleted() instead (size)" text="assertEquals(0, $subscriber$.getOnCompletedEvents().size());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNotCompleted();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNotCompleted() instead (empty)" text="assertThat($subscriber$.getOnCompletedEvents(), org.hamcrest.Matchers.empty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNotCompleted();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNotCompleted() instead (is(empty))" text="assertThat($subscriber$.getOnCompletedEvents(), org.hamcrest.Matchers.is(org.hamcrest.Matchers.empty()));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNotCompleted();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="RxJava: use assertNotCompleted() instead (isEmpty)" text="assertTrue($subscriber$.getOnCompletedEvents().isEmpty());" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="$subscriber$.assertNotCompleted();">
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="subscriber" nameOfExprType="rx.observers.TestSubscriber" expressionTypes="rx.observers.TestSubscriber" exprTypeWithinHierarchy="true" within="" contains="" />
        <constraint name="is" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <searchConfiguration name="JUnit error: use @Parametrized.Parameter needs to be public" text="@org.junit.runners.Parameterized.Parameter $FieldType$ $Field$;" recursive="false" caseInsensitive="true" type="JAVA">
        <constraint name="FieldType" within="" contains="" />
        <constraint name="Field" script="&quot;!__context__.hasModifierProperty(com.intellij.psi.PsiModifier.PUBLIC)&quot;" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
      </searchConfiguration>
      <replaceConfiguration name="JUnit: use assertEquals instead of assertTrue(equals)" text="assertTrue($a$.equals($b$));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertEquals($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotEquals instead of assertTrue(!equals)" text="assertTrue(!$a$.equals($b$));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotEquals($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotEquals instead of assertFalse(equals)" text="assertFalse($a$.equals($b$));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotEquals($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertEquals instead of assertFalse(!equals)" text="assertFalse(!$a$.equals($b$));" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertEquals($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertSame instead of assertTrue(==)" text="assertTrue($a$ == $b$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertSame($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotSame instead of assertTrue(!=)" text="assertTrue($a$ != $b$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotSame($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotSame instead of assertFalse(==)" text="assertFalse($a$ == $b$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotSame($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertSame instead of assertFalse(!=)" text="assertFalse($a$ != $b$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertSame($a$, $b$);">
        <constraint name="a" regexp="^null$" negateName="true" within="" contains="" />
        <constraint name="b" regexp="^null$" negateName="true" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertTrue(null==)" text="assertTrue(null == $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertTrue(==null)" text="assertTrue($x$ == null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertTrue(null!=)" text="assertTrue(null != $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertTrue(!=null)" text="assertTrue($x$ != null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertFalse(null==)" text="assertFalse(null == $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertFalse(==null)" text="assertFalse($x$ == null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertFalse(null!=)" text="assertFalse(null != $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertFalse(!=null)" text="assertFalse($x$ != null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertSame(*, null)" text="assertSame($x$, null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNull instead of assertSame(null, *)" text="assertSame(null, $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertNotSame(*, null)" text="assertNotSame($x$, null);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="JUnit: use assertNotNull instead of assertNotSame(null, *)" text="assertNotSame(null, $x$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="assertNotNull($x$);">
        <constraint name="x" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Team: use @Mocks without visibility modifiers" text="@org.mockito.Mock @Modifier(&quot;Instance&quot;) $FieldType$ $Field$;" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="@org.mockito.Mock $FieldType$ $Field$;">
        <constraint name="FieldType" within="" contains="" />
        <constraint name="Field" script="&quot;!__context__.hasModifierProperty(com.intellij.psi.PsiModifier.PACKAGE_LOCAL)&quot;" within="" contains="" />
        <constraint name="Init" minCount="0" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
        <constraint name="MockSettings" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="Team: use @Fixture without visibility modifiers" text="@com.flextrade.jfixture.annotations.Fixture @Modifier(&quot;Instance&quot;) $FieldType$ $Field$;" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" replacement="@com.flextrade.jfixture.annotations.Fixture $FieldType$ $Field$;">
        <constraint name="FieldType" within="" contains="" />
        <constraint name="Field" script="&quot;!__context__.hasModifierProperty(com.intellij.psi.PsiModifier.PACKAGE_LOCAL)&quot;" within="" contains="" />
        <constraint name="Init" minCount="0" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <constraint name="MockSettings" minCount="0" maxCount="0" within="" contains="" />
      </replaceConfiguration>
      <searchConfiguration name="Team: @Mocks should have &quot;mock&quot; prefix" text="@org.mockito.Mock @Modifier(&quot;Instance&quot;) $FieldType$ $Field$;" recursive="false" caseInsensitive="true" type="JAVA">
        <constraint name="FieldType" within="" contains="" />
        <constraint name="Field" regexp="^mock[A-Z\d].*$" target="true" negateName="true" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
      </searchConfiguration>
      <searchConfiguration name="Team: @Fixtures should have &quot;fixt&quot; prefix" text="@com.flextrade.jfixture.annotations.Fixture @Modifier(&quot;Instance&quot;) $FieldType$ $Field$;" recursive="false" caseInsensitive="false" type="JAVA">
        <constraint name="FieldType" within="" contains="" />
        <constraint name="Field" regexp="^fixt[A-Z\d].*$" target="true" negateName="true" within="" contains="" />
        <constraint name="__context__" within="" contains="" />
      </searchConfiguration>
    </inspection_tool>
    <inspection_tool class="SSBasedInspection1" enabled="true" level="ERROR" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection2" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection3" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection4" enabled="true" level="TYPO" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection5" enabled="true" level="SERVER PROBLEM" enabled_by_default="true" />
    <inspection_tool class="StaticMethodOnlyUsedInOneClass" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="ignoreOnConflicts" value="false" />
    </inspection_tool>
    <inspection_tool class="StaticSuite" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="SuperTearDownInFinally" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="TestCaseWithNoTestMethods" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="ignoreSupers" value="false" />
    </inspection_tool>
    <inspection_tool class="TestMethodIsPublicVoidNoArg" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="TooBroadScope" enabled="false" level="WARNING" enabled_by_default="false">
      <option name="m_allowConstructorAsInitializer" value="true" />
      <option name="m_onlyLookAtBlocks" value="false" />
    </inspection_tool>
    <inspection_tool class="TypeMayBeWeakened" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="useRighthandTypeAsWeakestTypeInAssignments" value="true" />
      <option name="useParameterizedTypeForCollectionMethods" value="true" />
      <option name="doNotWeakenToJavaLangObject" value="true" />
      <option name="onlyWeakentoInterface" value="true" />
    </inspection_tool>
    <inspection_tool class="UnconstructableTestCase" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="UnnecessaryQualifiedReference" enabled="true" level="INFORMATION" enabled_by_default="true" />
    <inspection_tool class="UseOfObsoleteAssert" enabled="true" level="WARNING" enabled_by_default="true" />
    <inspection_tool class="WeakerAccess" enabled="false" level="WARNING" enabled_by_default="false">
      <option name="SUGGEST_PACKAGE_LOCAL_FOR_MEMBERS" value="true" />
      <option name="SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES" value="true" />
      <option name="SUGGEST_PRIVATE_FOR_INNERS" value="false" />
    </inspection_tool>
  </profile>
</component>